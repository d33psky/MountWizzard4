#
# GitHub actions for building the distribution of the mountwizzard4 package
#
# v0.1, Michael Wuertenberger
#
name: python3_deploy

on:
  push:
    # Run this action on the trigger event when specific files are touched
    # paths:
    #   - '.github/workflows/python3_deploy.yml'
    tags:
       - 'v*'

jobs:

  # This action is split into five jobs:
  # 1 Building the distribution
  # 2 Running the unit tests on macOS
  # 3 Running the unit tests on Windows
  # 4 Installing the distribution in a multiple os and python versions
  # 5 Uploading the distribution to PyPI
  # Job 2 + 3 need Job 1 to be finished without error.
  # Job 5 needs 2 + 3 + 4 to be finished without error.

  build_widgets_resource:

    # First the distribution is done on an ubuntu. This is not related to any
    # operating system, so we could do it on the default os og GitHub.
    # Python 3.9 is chosen as it is the actual version you could work with.

    runs-on: 'ubuntu-latest'

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: build_widgets_resource
      run: |
        python -m pip install PyQt5
        python -m PyQt5.uic.pyuic mw4/gui/widgets/devicePopup.ui -o mw4/gui/widgets/devicePopup_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/downloadPopup.ui -o mw4/gui/widgets/downloadPopup_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/hemisphere.ui -o mw4/gui/widgets/hemisphere_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/image.ui -o mw4/gui/widgets/image_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/keypad.ui -o mw4/gui/widgets/keypad_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/main.ui -o mw4/gui/widgets/main_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/measure.ui -o mw4/gui/widgets/measure_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/message.ui -o mw4/gui/widgets/message_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/satellite.ui -o mw4/gui/widgets/satellite_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/analyse.ui -o mw4/gui/widgets/analyse_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/mount3D.ui -o mw4/gui/widgets/mount3D_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/simulator.ui -o mw4/gui/widgets/simulator_ui.py
        python -m PyQt5.pyrcc_main mw4/resource/resources.qrc -o mw4/resource/resources.py

    - name: build_package
      run: |
        python -m pip install setuptools wheel
        python setup.py sdist
        mv dist/mountwizzard4*.* dist/mountwizzard4.tar.gz

    - name: upload_package
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist

    - name: upload_package
      uses: actions/upload-artifact@v2
      with:
        name: widgets
        path: mw4/gui/widgets/*.py

    - name: upload_package
      uses: actions/upload-artifact@v2
      with:
        name: resource
        path: mw4/resource/*.py

  run_tests_macos_1:
  
    # The package has 3000+ unit tests, which will be tested on macOS as
    # the ubuntu version does not have a headless Qt5
  
    needs: [build_widgets_resource]
    runs-on: [macos-latest]
    
    steps:

      - uses: actions/checkout@v2
  
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
  
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
  
      - uses: actions/download-artifact@v2
        with:
          name: widgets
          path: mw4/gui/widgets
  
      - uses: actions/download-artifact@v2
        with:
          name: resource
          path: mw4/resource
          
      - name: install_package
        run: |
          python -m pip install cython wheel
          python -m pip install dist/mountwizzard4.tar.gz

      - name: install_pytest
        run: |
          python -m pip install pytest
          python -m pip install pytest-qt
          python -m pip install pytest-cov
          python -m pip install pytest-flake8
          python -m pip install pytest-pythonpath
  
      - name: running_unit_tests
        run: |
          pytest tests/unit_tests/zLoader
          pytest tests/unit_tests/zMainApp
          pytest tests/unit_tests/gui/utilities
          pytest tests/unit_tests/gui/extWindows
          pytest tests/unit_tests/base
          pytest tests/unit_tests/logic
          pytest tests/unit_tests/mountcontrol
          pytest tests/unit_tests/indibase

  run_tests_macos_2:
  
    # The package has 3000+ unit tests, which will be tested on macOS as
    # the ubuntu version does not have a headless Qt5
  
    needs: [build_widgets_resource]
    runs-on: [macos-latest]
    
    steps:
  
      - uses: actions/checkout@v2
  
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
  
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
  
      - uses: actions/download-artifact@v2
        with:
          name: widgets
          path: mw4/gui/widgets
  
      - uses: actions/download-artifact@v2
        with:
          name: resource
          path: mw4/resource
          
      - name: install_package
        run: |
          python -m pip install cython wheel
          python -m pip install dist/mountwizzard4.tar.gz
  
      - name: install_pytest
        run: |
          python -m pip install pytest
          python -m pip install pytest-qt
          python -m pip install pytest-cov
          python -m pip install pytest-flake8
          python -m pip install pytest-pythonpath
  
      - name: running_unit_tests
        run: |
          pytest tests/unit_tests/gui/mainWindow
          pytest tests/unit_tests/gui/mainWmixin

  install_package:

    # The wheels are build for different OS and python versions.
    # The wheels are build for Windows, Linux and macOS and the python versions
    # 3.7 - 3.9
    # The three operating system could be done in parallel.

    needs: [build_widgets_resource]
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 9
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        python-version: [3.7, 3.8, 3.9]

    steps:

      - uses: actions/checkout@v2
  
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
  
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
  
      - name: install_package
        run: |
          python -m pip install cython
          python -m pip install dist/mountwizzard4.tar.gz
          python -m pip install comtypes==1.1.7
  
      - name: check_dependencies_explicit
        run: |
          python -m pip check mountwizzard4
  
      - uses: actions/download-artifact@v2
        with:
          name: widgets
          path: mw4/gui/widgets
  
      - uses: actions/download-artifact@v2
        with:
          name: resource
          path: mw4/resource

      - name: show_files
        shell: bash
        run: |
          ls -lh mw4/gui/widgets
          ls -lh mw4/resource
  
      - name: make_test_run
        if: matrix.os != 'ubuntu-latest'
        run: |
          python mw4/loader.py test
  
      - name: make_test_run_ubuntu
        if: matrix.os == 'ubuntu-test'
        run: |
          sudo apt-get install libpulse-dev
          sudo apt-get install xvfb
          sudo apt-get install libx11-xcb1
          xvfb-run python mw4/loader.py test

  upload_to_pypi:

    # Finally, we collect all out data from the artifacts and put them back to
    # dist directory for an upload. The final step waits for the other jobs to be
    # finished and starts only if the trigger event of the action was a push
    # of a tag starting with <v> as version separation. All other jobs run
    # without heading <v>

    runs-on: [ubuntu-latest]
    needs: [install_package, run_tests_macos_1, run_tests_macos_2]

    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')

    steps:
    - uses: actions/setup-python@v2

    - uses: actions/download-artifact@v2
      with:
        name: dist
        path: dist

    # Actually I only have the test version of PyPI running. The secret token
    # name I have chosen from my test repo is <PYPI_TEST>. This will not work
    # in your repo. Please take care of it.
    #
    # For the activation of the real index, please add a secret token from PyPI to
    # the GitHub repo, give it a name and replace in the password reference the
    # <pypi_password> with the name of the secret's name you have chosen for the
    # PyPI token.

    - name: upload_to_test_PyPI
      uses: pypa/gh-action-pypi-publish@v1.4.1
      with:
        user: __token__
        password: ${{ secrets.PYPI_TEST }}
        skip_existing: true
        repository_url: https://test.pypi.org/legacy/

    # - name: upload_to_PyPI
    #   uses: pypa/gh-action-pypi-publish@v1.4.1
    #   with:
    #     user: __token__
    #     password: ${{ secrets.pypi_password }}
    #     skip_existing: true
