#
# GitHub actions for checking the installation of MW4 through scripts
#
# v 1.0, Michael Wuertenberger
#
name: test_scripts_pypi

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  gh: 'https://raw.githubusercontent.com/mworion/MountWizzard4/master/support/'

on:
  push:
    # Run this action on the trigger event when specific files are touched
    paths:
      - '.github/workflows/test_scripts_pypi.yml'
      - 'support/**'
      - 'setup.py'

jobs:
  
  install_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install Script Run
        uses: suisei-cn/actions-download-file@v1
        with:
          url: ${{ env.gh }}startup/startup.py
          target: .
      
      - name: MountWizzard4 Install
        shell: cmd
        run: |
          python startup.py --no-start --version 2.2.7
          dir
      
      - name: Run MountWizzard4
        shell: cmd
        run: |
          touch test.run
          touch test.txt
          python startup.py
          dir
  
  install_ubuntu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install Head
        run: |
          sudo apt-get update
          sudo apt-get -y upgrade
          sudo apt-get install -y xvfb libxkbcommon-x11-0 x11-utils libxcb-icccm4
          sudo apt-get install -y libxcb-image0 libxcb-keysyms1 libxcb-randr0
          sudo apt-get install -y libxcb-render-util0 libpulse-mainloop-glib0
          sudo apt-get install -y libx11-xcb1 libxcb-xinerama0 libxcb-xkb1
          sudo apt-get install -y libxcb-keysyms1
        
      - name: Install Script Install
        uses: suisei-cn/actions-download-file@v1
        with:
          url: ${{ env.gh }}startup.pyz
          target: .
          
      - name: MountWizzard4 Install
        run: |
          python3 startup.pyz --no-start --version 2.2.7
          ls -la
  
      - name: Run MountWizzard4
        run: |
          touch test.run
          touch test.txt
          xvfb-run python3 startup.pyz
          ls -la
          
  install_macOS:
    runs-on: macos-latest
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Script Install
        uses: suisei-cn/actions-download-file@v1
        with:
          url: ${{ env.gh }}startup.pyz
          target: .
          
      - name: MountWizzard4 Install
        run: |
          python3 startup.pyz --no-start --version 2.2.7
          ls -la
          
      - name: Run MountWizzard4
        run: |
          touch test.run
          touch test.txt
          python3 startup.pyz
          ls -la
          

  install_package_aarch64_2004:
    # The host should always be linux
    runs-on: ubuntu-20.04
    name: install_${{ matrix.distro }}_${{ matrix.arch }}
    # Run steps on a matrix of 3 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu20.04

    steps:
      - uses: actions/checkout@v3

      - uses: uraimo/run-on-arch-action@v2.2.0
        name: build_artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Mount the wheels directory as /artifacts in the container
          dockerRunArgs: |
            -v "${PWD}/support/3.0":/root/support

          # The shell to run commands with in the container
          shell: /bin/bash

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            apt-get update -y
            apt-get upgrade -y

          # Produce a binary artifact and place it in the mounted volume
          run: |
            apt-get -y install python3.8-venv
            python3 --version
            ls /root/support/*.*
            cd /root/support
            python3 startup.pyz --no-start --version 2.2.7
            touch test.run
            python3 startup.pyz
            cat startup*.log
            ls -la
          

  install_package_aarch64_2204:
    # The host should always be linux
    runs-on: ubuntu-22.04
    name: install_${{ matrix.distro }}_${{ matrix.arch }}
    # Run steps on a matrix of 3 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu22.04

    steps:
      - uses: actions/checkout@v3

      - uses: uraimo/run-on-arch-action@v2.2.0
        name: build_artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Mount the wheels directory as /artifacts in the container
          dockerRunArgs: |
            -v "${PWD}/support/3.0":/root/support

          # The shell to run commands with in the container
          shell: /bin/bash

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            apt-get update -y
            apt-get upgrade -y

          # Produce a binary artifact and place it in the mounted volume
          run: |
            apt-get -y install python3.10-venv
            python3 --version
            ls /root/support/*.*
            cd /root/support
            python3 startup.pyz --no-start --version 2.2.7
            touch test.run
            python3 startup.pyz
            cat startup*.log
            ls -la

  install_package_armv7:
    # The host should always be linux
    runs-on: ubuntu-20.04
    name: install_${{ matrix.distro }}_${{ matrix.arch }}
    # Run steps on a matrix of 3 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: armv7
            distro: ubuntu20.04

    steps:
      - uses: actions/checkout@v3

      - uses: uraimo/run-on-arch-action@v2.2.0
        name: build_artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Mount the wheels directory as /artifacts in the container
          dockerRunArgs: |
            -v "${PWD}/support/3.0":/root/support

          # The shell to run commands with in the container
          shell: /bin/bash

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            apt-get update -y
            apt-get upgrade -y

          # Produce a binary artifact and place it in the mounted volume
          run: |
            apt-get -y install python3.8-venv
            python3 --version
            ls /root/support/*.*
            cd /root/support
            python3 startup.pyz --no-start --version 2.2.7
            touch test.run
            python3 startup.pyz
            cat startup*.log
            ls -la
