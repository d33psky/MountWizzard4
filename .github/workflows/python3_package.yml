#
# GitHub actions for checking the installation of mountwizzard4 packages
#
# v0.1, Michael Wuertenberger
#
name: python3_package

on:
  push:
    # Run this action on the trigger event when specific files are touched
    paths:
      - 'mw4/**'
      - 'setup.py'
      - 'tox.ini'
      - '.github/workflows/python3_package.yml'

jobs:

  # This action is split into two jobs:
  # 1 Building the distribution
  # 2 Installing the distribution in a multiple os and python versions
  # Job 2 need 1 to be finished without error.

  build_widgets_resource:

    # First the distribution is done on an ubuntu. This is not related to any
    # operating system, so we could do it on the default os og GitHub.
    # Python 3.9 is chosen as it is the actual version you could work with.

    runs-on: 'ubuntu-latest'

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: build_widgets_resource
      run: |
        python -m pip install PyQt5
        python -m PyQt5.uic.pyuic mw4/gui/widgets/devicePopup.ui -o mw4/gui/widgets/devicePopup_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/downloadPopup.ui -o mw4/gui/widgets/downloadPopup_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/hemisphere.ui -o mw4/gui/widgets/hemisphere_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/image.ui -o mw4/gui/widgets/image_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/keypad.ui -o mw4/gui/widgets/keypad_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/main.ui -o mw4/gui/widgets/main_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/measure.ui -o mw4/gui/widgets/measure_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/message.ui -o mw4/gui/widgets/message_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/satellite.ui -o mw4/gui/widgets/satellite_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/analyse.ui -o mw4/gui/widgets/analyse_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/mount3D.ui -o mw4/gui/widgets/mount3D_ui.py
        python -m PyQt5.uic.pyuic mw4/gui/widgets/simulator.ui -o mw4/gui/widgets/simulator_ui.py
        python -m PyQt5.pyrcc_main mw4/resource/resources.qrc -o mw4/resource/resources.py

    - name: build_package
      run: |
        python -m pip install setuptools wheel
        python setup.py sdist
        mv dist/mountwizzard4*.* dist/mountwizzard4.tar.gz

    - name: upload_package
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist

    - name: upload_package
      uses: actions/upload-artifact@v2
      with:
        name: widgets
        path: mw4/gui/widgets/*.py

    - name: upload_package
      uses: actions/upload-artifact@v2
      with:
        name: resource
        path: mw4/resource/*.py
        
        
  install_package_windows:

    needs: [build_widgets_resource]
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 9
      matrix:
        os: [windows-latest]
        python-version: [3.7, 3.8, 3.9]

    steps:
    if: always()
      -
      - uses: actions/checkout@v2
  
      - name: setup_python_windows ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x86'
  
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
  
      - uses: actions/download-artifact@v2
        with:
          name: widgets
          path: mw4/gui/widgets
  
      - uses: actions/download-artifact@v2
        with:
          name: resource
          path: mw4/resource
  
      - name: install_package
        run: |
          python -m pip install cython
          python -m pip install dist/mountwizzard4.tar.gz
  
      - name: check_dependencies_explicit
        run: |
          python -m pip check mountwizzard4
  
      - name: make_test_run
        run: |
          python mw4/loader.py test
      
    - name: upload_log
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: log
        path: '*.log'
      


  install_package_ubuntu:

    needs: [build_widgets_resource]
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 9
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7, 3.8, 3.9]

    steps:
    if: always()
      
      - uses: actions/checkout@v2
  
      - name: setup_python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
  
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
  
      - uses: actions/download-artifact@v2
        with:
          name: widgets
          path: mw4/gui/widgets
  
      - uses: actions/download-artifact@v2
        with:
          name: resource
          path: mw4/resource
  
      - name: install_package
        run: |
          python -m pip install cython
          python -m pip install dist/mountwizzard4.tar.gz
  
      - name: check_dependencies_explicit
        run: |
          python -m pip check mountwizzard4


  install_package_macOS:

    needs: [build_widgets_resource]
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 9
      matrix:
        os: [macos-latest]
        python-version: [3.7, 3.8, 3.9]

    steps:
    if: always()
      -
      - uses: actions/checkout@v2
      - name: setup_python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
  
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
  
      - uses: actions/download-artifact@v2
        with:
          name: widgets
          path: mw4/gui/widgets
  
      - uses: actions/download-artifact@v2
        with:
          name: resource
          path: mw4/resource
  
      - name: install_package
        run: |
          python -m pip install cython
          python -m pip install dist/mountwizzard4.tar.gz
  
      - name: check_dependencies_explicit
        run: |
          python -m pip check mountwizzard4
  
      - name: make_test_run
        run: |
          python mw4/loader.py test
