#
# GitHub actions
#
# v0.1,  Michael Wuertenberger
#
name: scripts_install

on:
  push:
    # Run this action on the trigger event when specific files are touched
    paths:
      - '.github/workflows/scripts_install.yml'

jobs:
  build_job:
    # The host should always be linux
    runs-on: ubuntu-20.04
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    # Run steps on a matrix of 3 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu20.04

    steps:
      - uses: uraimo/run-on-arch-action@v2.1.1
        name: build_artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
            --platform linux/arm64/v8

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}

          # The shell to run commands with in the container
          shell: /bin/bash

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          
          install: |
            apt-get update -y
            apt-get upgrade -y
            apt-get install -y software-properties-common
            add-apt-repository ppa:deadsnakes/ppa
            apt-get update -y
            apt-get -y install python3.8 python3-pip python3.8-venv
            apt-get -y install wget
          
          # Produce a binary artifact and place it in the mounted volume
          run: |
            python3 -m venv venv
            python3 -c "from wheel.pep425tags import get_abi_tag; print(get_abi_tag())" >> test.log
            python3 -c "import platform; print(platform.python_version())" >> test.log
            source venv/bin/activate
            python --version >> test.log
            ARCH="_aarch64.whl"
            PY="-cp38-38-"
            WHL="https://github.com/mworion/mountwizzard4/raw/master/support/wheels/ubuntu20.04"
            #pip install "${WHL}"/pyerfa-2.0.0"${PY}"linux"${ARCH}"
            #pip install "${WHL}"/astropy-4.3.1"${PY}"linux"${ARCH}"
            #pip install "${WHL}"/sep-1.2.0"${PY}"linux"${ARCH}"
            #pip install "${WHL}"/sgp4-2.20"${PY}"manylinux2014"${ARCH}"
            #pip install "${WHL}"/PyQt5_sip-12.9.0"${PY}"linux"${ARCH}"
            #pip install "${WHL}"/PyQt5-5.15.4-cp36.cp37.cp38.cp39-abi3-manylinux2014"${ARCH}"

      - name: show_log
        run: |
          cat test.log
