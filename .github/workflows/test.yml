#
# GitHub actions for running the unit test of the mountwizzard4 package
#
# v0.1, Michael Wuertenberger
#
name: test

on:
  push:
    # Run this action on the trigger event when specific files are touched
    paths:
      - '.github/workflows/test.yml'

jobs:
  build_job:
    # The host should always be linux
    runs-on: ubuntu-18.04
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    # Run steps on a matrix of 3 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu18.04

    steps:
      - uses: actions/checkout@v2.1.0
      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            apt-get install wget
            cd ~
            mkdir tmp
            cd tmp
            wget https://www.python.org/ftp/python/3.8.7/Python-3.8.7.tgz
            tar zxvf Python-3.8.7.tgz
            cd Python-3.8.7
            ./configure --prefix=$HOME/opt/python-3.8.7
            make
            make install
            cd ~
            export PATH=$HOME/opt/python-3.8.7/bin:$PATH
            
          # Produce a binary artifact and place it in the mounted volume
          run: |
            cp $(python3 --version) "/artifacts/${artifact_name}/python.txt"
            echo "Produced artifact at /artifacts/${artifact_name}"

      - name: Show the artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host.
        run: |
          ls -al "${PWD}/artifacts"